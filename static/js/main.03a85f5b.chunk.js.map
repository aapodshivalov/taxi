{"version":3,"sources":["actions/index.js","containers/CarsList.js","containers/Car.js","components/Page.js","serviceWorker.js","reducers/car.js","store.js","reducers/index.js","reducers/carslist.js","index.js"],"names":["selectCar","car","console","log","type","payload","addCarsList","list","cars","marketName","color","licensePlate","dist_m","CarsList","this","props","carslist","map","item","index","key","Button","onClick","error","length","showList","Component","connect","state","dispatch","bindActionCreators","Car","Page","myMap","undefined","init","window","ymaps","Map","center","zoom","searchControlProvider","useEffect","script","document","createElement","src","async","onload","ready","body","appendChild","removeChild","id","style","width","height","Boolean","location","hostname","match","initialState","rootReducer","combineReducers","action","test","StoreInstance","createStore","ReactDOM","render","StrictMode","store","loog","loog2","getState","getElementById","navigator","serviceWorker","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.03a85f5b.chunk.js","sourcesContent":["export const selectCar = (car) => {\r\n    console.log(\"selectCart car\", car);\r\n    return {\r\n        type: 'SELECTED_CAR',\r\n        payload: car\r\n    }\r\n}\r\n\r\nexport const addCarsList = (list) => {\r\n    console.log(\"addCarsList list\", list);\r\n    return {\r\n        type: 'ADD_CARS_LIST',\r\n        payload: list\r\n    }\r\n}","import React, { Component } from 'react';\r\n// import './../App.css';\r\nimport { Button, TextField } from '@material-ui/core';\r\n// import Carslist from '../components/Page';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { addCarsList, selectCar } from '../actions/index';\r\n\r\nconst cars = [\r\n    { marketName: 'kio rio', color: 'white', licensePlate: \"o001oo\", dist_m: '100' },\r\n    { marketName: 'kio rio', color: 'white', licensePlate: \"o002oo\", dist_m: '200' },\r\n];\r\n\r\nclass CarsList extends Component {\r\n    showList() {\r\n        const list = this.props.carslist && this.props.carslist.map((item, index) => (\r\n            <li key={index}>{item.licensePlate} /\r\n            <Button\r\n                type=\"button\"\r\n                color=\"primary\"\r\n                onClick={() => this.props.selectCar(item)}>\r\n            addCar\r\n        </Button></li>\r\n        ));\r\n        const error = this.props.error || 'no cars';\r\n        return <div>\r\n        {(list && list.length > 0)\r\n          ? <ul>{list}</ul>\r\n          : <div>{error}</div>}\r\n         </div>;\r\n    }\r\n    render () {\r\n        return (\r\n            <div>\r\n                <Button type=\"button\" color=\"primary\" onClick={() => this.props.addCarsList(cars)}>\r\n                    addlist\r\n                </Button>\r\n                {this.showList()}\r\n                {/* <form\r\n                    id=\"myform\"\r\n                    name=\"myform\"\r\n                    onSubmit={(e,a) => {\r\n                        e.preventDefault();\r\n                        console.log('e,a');\r\n                        console.log('e,a', e.target);\r\n                        console.log('e,a', e.currentTarget);\r\n                        }}\r\n                        // className={classes.root}\r\n                        noValidate autoComplete=\"off\">\r\n                    <TextField id=\"standard-basic\" label=\"Standard\" />\r\n                    <TextField id=\"filled-basic\" label=\"Filled\" variant=\"filled\" />\r\n                    <TextField id=\"outlined-basic\" label=\"Outlined\" variant=\"outlined\" />\r\n                </form>\r\n                <Button type=\"submit\" form=\"myform\" variant=\"contained\" color=\"primary\">\r\n                    Hello World\r\n                </Button> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        carslist: state.carslist\r\n    };\r\n}\r\n\r\nfunction matchDispatchToProps (dispatch) {\r\n    return bindActionCreators({ addCarsList: addCarsList, selectCar }, dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps, matchDispatchToProps)(CarsList);\r\n","import React, { Component } from 'react';\r\nimport { Button, TextField } from '@material-ui/core';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Car extends Component {\r\n    render () {\r\n        if (!this.props.car) {\r\n            return <p>no car selected</p>\r\n        }\r\n        return (\r\n            <div>\r\n                <p>Name: {this.props.car.marketName}</p>\r\n                <p>License Plate: {this.props.car.licensePlate}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        car: state.car\r\n    };\r\n}\r\n\r\n// function matchDispatchToProps (dispatch) {\r\n//     return bindActionCreators({ addCarsList: addCarsList }, dispatch);\r\n// }\r\n\r\nexport default connect(mapStateToProps)(Car);\r\n","import React, { useEffect } from 'react';\r\n// import { Button, TextField } from '@material-ui/core';\r\nimport CarsList from '../containers/CarsList';\r\nimport Car from '../containers/Car';\r\n\r\nconst Page = () => {\r\n    let myMap = undefined;\r\n    useEffect(() => {\r\n        console.log('1234');\r\n        const script = document.createElement('script');\r\n      \r\n        script.src = \"https://api-maps.yandex.ru/2.1/?apikey=15d0506a-9ee6-47c4-b5b0-b33294e759a5&lang=ru_RU\";\r\n        script.async = true;\r\n    \r\n        script.onload = () => {\r\n          console.log('window.ymaps', window.ymaps);\r\n          window.ymaps.ready(init); // Дождёмся загрузки API и готовности DOM.\r\n        };\r\n      \r\n        document.body.appendChild(script);\r\n      \r\n        return () => {\r\n          document.body.removeChild(script);\r\n        }\r\n      }, []);\r\n      \r\n      function init () {\r\n          // Создание экземпляра карты и его привязка к контейнеру с\r\n          // заданным id (\"map\").\r\n          myMap = new window.ymaps.Map('map', {\r\n              // При инициализации карты обязательно нужно указать\r\n              // её центр и коэффициент масштабирования.\r\n              center: [55.76, 37.64], // Москва\r\n              zoom: 10\r\n          }, {\r\n              searchControlProvider: 'yandex#search'\r\n          });\r\n      }\r\n\r\n\r\n    //   if (window.ymaps) {\r\n\r\n    //   };\r\n                \r\n     return <div>\r\n        <h2>CarsList:</h2>\r\n        <CarsList />\r\n        <hr />\r\n        <h2>Car:</h2>\r\n        <Car />\r\n        {myMap && <div>\r\n            {myMap}\r\n        </div>}\r\n        <div id=\"map\" style={{ width: '450px', height: '350px' }}></div> \r\n    </div>};\r\n\r\nexport default Page;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export default(state = null, action) => {\r\n    switch(action.type) {\r\n        case 'SELECTED_CAR':\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}","import { createStore } from 'redux';\r\nimport rootReducer from './reducers';\r\nexport default(initialState) => {\r\n    return createStore(rootReducer, initialState);\r\n}","import car from './car';\r\nimport carslist from './carslist';\r\nimport { combineReducers } from 'redux';\r\n\r\nconst rootReducer = combineReducers({\r\n    car,\r\n    carslist,\r\n    test: 'test',\r\n});\r\n\r\nexport default rootReducer;","export default(state = [], action) => {\r\n    switch(action.type) {\r\n        case 'ADD_CARS_LIST':\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Page from './components/Page';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport Store from './store';\n// import {Helmet} from \"react-helmet\";\nconst StoreInstance = Store();\n\nReactDOM.render(\n    <React.StrictMode>\n  <Provider store={StoreInstance}\n    loog={console.log('StoreInstance', StoreInstance)}\n    loog2={console.log('StoreInstance.getState', StoreInstance.getState())}\n    >\n      {/* <Helmet>\n      <head>\n        <script src=\"https://api-maps.yandex.ru/2.1/?apikey=15d0506a-9ee6-47c4-b5b0-b33294e759a5&lang=ru_RU\"\n         type=\"text/javascript\">\n        </script>\n      </head>\n      </Helmet> */}\n      <Page />\n  </Provider>\n    </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}